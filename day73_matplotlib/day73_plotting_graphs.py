# -*- coding: utf-8 -*-
"""plotting-graphs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FMxZ2uAcSloKJRfu4I2Z83AScg1IP3I7

## Get the Data

Either use the provided .csv file or (optionally) get fresh (the freshest?) data from running an SQL query on StackExchange:

Follow this link to run the query from [StackExchange](https://data.stackexchange.com/stackoverflow/query/675441/popular-programming-languages-per-over-time-eversql-com) to get your own .csv file

<code>
select dateadd(month, datediff(month, 0, q.CreationDate), 0) m, TagName, count(*)
from PostTags pt
join Posts q on q.Id=pt.PostId
join Tags t on t.Id=pt.TagId
where TagName in ('java','c','c++','python','c#','javascript','assembly','php','perl','ruby','visual basic','swift','r','object-c','scratch','go','swift','delphi')
and q.CreationDate < dateadd(month, datediff(month, 0, getdate()), 0)
group by dateadd(month, datediff(month, 0, q.CreationDate), 0), TagName
order by dateadd(month, datediff(month, 0, q.CreationDate), 0)
</code>

## Import Statements
"""

import pandas as pd
import matplotlib.pyplot as plt

"""## Data Exploration

**Challenge**: Read the .csv file and store it in a Pandas dataframe
"""

df = pd.read_csv('QueryResults.csv', names=['DATE', 'TAG', 'POSTS'], header=0)

# here, when header is set to 0, it allows us to set our own column names
# as mentioned in names=[]

"""**Challenge**: Examine the first 5 rows and the last 5 rows of the of the dataframe"""

df.head()

df.tail()

"""**Challenge:** Check how many rows and how many columns there are.
What are the dimensions of the dataframe?
"""

df.shape

"""**Challenge**: Count the number of entries in each column of the dataframe"""

df.count()

"""**Challenge**: Calculate the total number of post per language.
Which Programming language has had the highest total number of posts of all time?
"""

# we can group the ones with same tag. so we can use:
df.groupby('TAG').sum()

"""Some languages are older (e.g., C) and other languages are newer (e.g., Swift). The dataset starts in September 2008.

**Challenge**: How many months of data exist per language? Which language had the fewest months with an entry?

"""

df.groupby('TAG').count()

"""## Data Cleaning

Let's fix the date format to make it more readable. We need to use Pandas to change format from a string of "2008-07-01 00:00:00" to a datetime object with the format of "2008-07-01"
"""

df['DATE'][1]

df.DATE[1]

print(pd.to_datetime(df.DATE[1]))
type(pd.to_datetime(df.DATE[1]))

# to convert the entire column:
df.DATE = pd.to_datetime(df.DATE)
df.head()
# type(df.DATE)

"""## Data Manipulation


"""

# sometimes we need to convert our dataframe in such a way so that each catagory
# has its own column, for that we can use pivot() function of pd.
# kind of like to take a transpose of the table. for exp:

test_df = pd.DataFrame({
    'Age': ['Young', 'Young', 'Young', 'Young', 'Old', 'Old', 'Old', 'Old'],
    'Actor': ['Jack', 'Arnold', 'Keanu', 'Sylvester', 'Jack', 'Arnold', 'Keanu', 'Sylvester'],
    'Power': [100, 80, 25, 50, 99, 75, 5, 30]
})

test_df

pivoted_df = test_df.pivot(index='Age', columns='Actor', values='Power')
pivoted_df

# so for our own df we have here: pivot the df DataFrame so that each row
# is a date and each column is a programming language? Store the result under
# a variable called reshaped_df

reshaped_df = df.pivot(index='DATE', columns='TAG', values='POSTS')
reshaped_df

"""**Challenge**: What are the dimensions of our new dataframe? How many rows and columns does it have? Print out the column names and print out the first 5 rows of the dataframe."""

reshaped_df.shape

reshaped_df.columns

reshaped_df.head()

"""**Challenge**: Count the number of entries per programming language. Why might the number of entries be different?"""

reshaped_df.count()

# to fill the values where NaN, we can use fillna()
# to substitute 0 in place of them

reshaped_df.fillna(0, inplace=True)
# the inplace=True here means that we are updating the df.
# or else we would have written

# reshaped_df = reshaped_df.fillna(0)

# now after filling the NaN spots, we can check if there are still some left:

reshaped_df.isna().values.any()

"""## Data Visualisaton with with Matplotlib

**Challenge**: Use the [matplotlib documentation](https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot) to plot a single programming language (e.g., java) on a chart.
"""

# to create charts, we need a library called matplotlib

plt.plot(reshaped_df.index, reshaped_df['java'])
# here reshaped_df.index will be x axis (dates), reshaped_df['java'] would be the y (posts)

plt.figure(figsize=(16, 10)) # this will increase the size of the graph

plt.xticks(fontsize=14) # this will increase the text size of both
plt.yticks(fontsize=14) # x and y axis

# to give labels to x and y axis:
plt.xlabel('DATE', fontsize=14)
plt.ylabel('No. of POSTS', fontsize=14)

# to set limit for y or x axis, cause posts can not be < 0:
plt.ylim(0, 35000) #(min, max)


plt.plot(reshaped_df.index, reshaped_df.java)

"""**Challenge**: Show two line (e.g. for Java and Python) on the same chart."""

plt.figure(figsize=(16, 10)) # this will increase the size of the graph

plt.xticks(fontsize=14) # this will increase the text size of both
plt.yticks(fontsize=14) # x and y axis

# to give labels to x and y axis:
plt.xlabel('DATE', fontsize=14)
plt.ylabel('No. of POSTS', fontsize=14)

# to set limit for y or x axis, cause posts can not be < 0:
plt.ylim(0, 35000) #(min, max)

plt.plot(reshaped_df.index, reshaped_df.java, reshaped_df.index, reshaped_df.python)

"""If we wanted to plot all the programming languages on the same chart?"""

plt.figure(figsize=(16, 10)) # this will increase the size of the graph

plt.xticks(fontsize=14) # this will increase the text size of both
plt.yticks(fontsize=14) # x and y axis

# to give labels to x and y axis:
plt.xlabel('DATE', fontsize=14)
plt.ylabel('No. of POSTS', fontsize=14)

# to set limit for y or x axis, cause posts can not be < 0:
plt.ylim(0, 35000) #(min, max)

for column in reshaped_df.columns:
    plt.plot(reshaped_df.index, reshaped_df[column], label=reshaped_df[column].name)

plt.legend(fontsize=16)

"""# Smoothing out Time Series Data

Time series data can be quite noisy, with a lot of up and down spikes. To better see a trend we can plot an average of, say 6 or 12 observations. This is called the rolling mean. We calculate the average in a window of time and move it forward by one overservation. Pandas has two handy methods already built in to work this out: [rolling()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rolling.html) and [mean()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.window.rolling.Rolling.mean.html).
"""

# The window is number of observations that are averaged
roll_df = reshaped_df.rolling(window=6).mean()

plt.figure(figsize=(16,10))
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Number of Posts', fontsize=14)
plt.ylim(0, 35000)

# plot the roll_df instead
for column in roll_df.columns:
    plt.plot(roll_df.index, roll_df[column], label=roll_df[column].name)

plt.legend(fontsize=16)